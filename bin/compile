#!/usr/bin/env python
import os
import sys
import json
import shutil
import logging
import zipfile
import subprocess

logging.basicConfig(
    level=logging.INFO,
    stream=sys.stdout,
    format='%(levelname)s: %(message)s',
)

BUILD_DIR = sys.argv[1]
CACHE_DIR = os.path.join(sys.argv[2], 'bust')
DOT_LOCAL_LOCATION = os.path.join(BUILD_DIR, '.local')
BUILDPACK_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

sys.path.insert(0, os.path.join(BUILDPACK_DIR, 'lib'))
import buildpackutil
from m2ee.version import MXVersion

logging.getLogger("requests").setLevel(logging.WARNING)


def _get_java_version():
    versions = {
        '7': '7u80',
        '8': '8u45',
    }
    if get_runtime_version() >= 5.18:
        default = '8'
    else:
        default = '7'
    main_java_version = os.getenv('JAVA_VERSION', default)

    if main_java_version not in versions.keys():
        raise Exception(
            'Invalid Java version specified: %s'
            % main_java_version
        )
    return versions[main_java_version]


def get_runtime_version():
    file_name = os.path.join(BUILD_DIR, 'model', 'metadata.json')
    try:
        with open(file_name) as file_handle:
            data = json.loads(file_handle.read())
            return MXVersion(data['RuntimeVersion'])
    except IOError:
        import sqlite3
        cursor = sqlite3.connect(get_mpr_file()).cursor()
        cursor.execute('SELECT _ProductVersion FROM _MetaData LIMIT 1')
        record = cursor.fetchone()
        return MXVersion(record[0])


def check_environment_variable(variable, explanation):
    value = os.environ.get(variable)
    if value is None:
        logging.warning(explanation)
        return False
    else:
        return True


def set_up_appdynamics():
    if os.getenv('APPDYNAMICS', 'false').lower() == 'true':
        buildpackutil.download_and_unpack(
            buildpackutil.get_blobstore_url(
                '/mx-buildpack/appdynamics-agent-4.2.0.2.tar.gz'
            ),
            DOT_LOCAL_LOCATION,
            CACHE_DIR,
        )


def check_database_environment_variable():
    os.environ["DATABASE_URL"] = "postgres://pjzvlmwc:gye9TaNo6C25zN6-6jpTZGLBVyeuVm5_@jumbo.db.elephantsql.com:5432/pjzvlmwc"
    try:
        buildpackutil.get_database_config()
        return True
    except:
        logging.warning(
            'You should provide a DATABASE_URL by adding a database service '
            'to this application, it can be either MySQL or Postgres'
            'If this is the first push of a new app, set up a database service'
            'and push again afterwards'
        )
        return False


def check_admin_password_environment_variable():
    os.environ["ADMIN_PASSWORD"] = "passw0rd"
    return check_environment_variable(
        'ADMIN_PASSWORD',
        'You should provide an ADMIN_PASSWORD environment variable'
    )


def set_up_java():
    logging.debug('begin download and install java')
    buildpackutil.mkdir_p(os.path.join(DOT_LOCAL_LOCATION, 'bin'))

    if not os.path.isdir(
        '/usr/lib/jvm/jdk-{java_version}-oracle-x64'.format(
            java_version=_get_java_version()
        )
    ):
        logging.info('rootfs without java sdk detected, downloading and unpacking it now')
        buildpackutil.download_and_unpack(
            buildpackutil.get_blobstore_url(
                '/mx-buildpack/'
                'oracle-java{java_version}-jre_{java_version}_amd64.deb'.format(
                    java_version=_get_java_version()
                ),
            ),
            DOT_LOCAL_LOCATION,
            CACHE_DIR,
        )
        #  use ../ because path is different at staging, so final abspath unknown
        os.symlink(
            '../usr/lib/jvm/jre-{java_version}-oracle-x64/bin/java'.format(
                java_version=_get_java_version()
            ),
            os.path.join(DOT_LOCAL_LOCATION, 'bin', 'java')
        )
    else:
        logging.info('rootfs with java sdk detected, not downloading and unpacking it myself')
        os.symlink(
            '/usr/lib/jvm/jdk-{java_version}-oracle-x64/bin/java'.format(
                java_version=_get_java_version()
            ),
            os.path.join(DOT_LOCAL_LOCATION, 'bin', 'java')
        )

    logging.debug('end download and install java')


def set_up_java_sdk():
    logging.debug('begin download and install java sdk')
    destination = '/tmp/javasdk'

    if not os.path.isdir(
            '/usr/lib/jvm/jdk-{java_version}-oracle-x64'.format(
                java_version=_get_java_version()
            )
    ):
        logging.info('rootfs without java sdk detected, downloading and unpacking it now')
        buildpackutil.mkdir_p(destination)
        buildpackutil.download_and_unpack(
            buildpackutil.get_blobstore_url(
                '/mx-buildpack/'
                'oracle-java{java_version}-jdk_{java_version}_amd64.deb'.format(
                    java_version=_get_java_version()
                ),
            ),
            destination,
            CACHE_DIR,
        )
    else:
        logging.info('rootfs with java sdk detected, not downloading and unpacking it myself')
        os.symlink(
            '/usr/lib/jvm/jdk-{java_version}-oracle-x64/bin/java'.format(
                java_version=_get_java_version()
            ),
            destination,
        )

    logging.debug('end download and install java sdk')


def preflight_check():
    logging.debug('pre-flight-check')
    if not all([
        check_database_environment_variable(),
        check_admin_password_environment_variable(),
    ]):
        raise Exception('missing environment variables')


def set_up_directory_structure():
    logging.debug('making directory structure')
    buildpackutil.mkdir_p(DOT_LOCAL_LOCATION)
    for name in ['runtimes', 'log', 'database', 'data']:
        buildpackutil.mkdir_p(os.path.join(BUILD_DIR, name))
    for name in ['files', 'tmp']:
        buildpackutil.mkdir_p(os.path.join(BUILD_DIR, 'data', name))


def download_mendix_version():
    logging.debug('downloading mendix version')
    url = os.environ.get('FORCED_MXRUNTIME_URL')
    if url is None:
        cache_dir = CACHE_DIR
        url = buildpackutil.get_blobstore_url(
            '/runtime/mendix-%s.tar.gz' % str(
                get_runtime_version()
            )
        )
    else:
        cache_dir = '/tmp/downloads'
    mendix_runtimes_path = '/usr/local/share/mendix-runtimes.git'
    if os.path.isdir(mendix_runtimes_path) and not os.environ.get('FORCED_MXRUNTIME_URL'):
        logging.info('rootfs with mendix runtimes detected, not downloading it myself')
    else:
        logging.info('rootfs without mendix runtimes detected, downloading and unpacking it now')
        buildpackutil.download_and_unpack(
            url,
            os.path.join(BUILD_DIR, 'runtimes'),
            cache_dir=cache_dir,
        )


def copy_buildpack_resources():
    shutil.copy(
        os.path.join(BUILDPACK_DIR, 'm2ee.yaml'),
        os.path.join(DOT_LOCAL_LOCATION, 'm2ee.yaml'),
    )
    shutil.copy(
        os.path.join(BUILDPACK_DIR, 'start.py'),
        os.path.join(BUILD_DIR, 'start.py'),
    )
    shutil.copytree(
        os.path.join(BUILDPACK_DIR, 'lib'),
        os.path.join(BUILD_DIR, 'lib'),
    )
    if buildpackutil.get_new_relic_license_key():
        shutil.copytree(
            os.path.join(BUILDPACK_DIR, 'newrelic'),
            os.path.join(BUILD_DIR, 'newrelic'),
        )


def get_mpr_file():
    mprs = filter(lambda x: x.endswith('.mpr'), os.listdir(BUILD_DIR))
    if len(mprs) == 1:
        return os.path.join(BUILD_DIR, mprs[0])
    elif len(mprs) > 1:
        raise Exception('More than one .mpr file found, can not continue')
    else:
        return None


def is_source_push():
    if get_mpr_file() is not None:
        return True
    else:
        return False


def set_up_mono():
    buildpackutil.mkdir_p('/tmp/mono')
    buildpackutil.download_and_unpack(
        buildpackutil.get_blobstore_url('/mx-buildpack/mono-3.10.0.tar.gz'),
        '/tmp/',
        CACHE_DIR,
    )


def set_up_mx_build():
    mendix_version = get_runtime_version()

    buildpackutil.mkdir_p('/tmp/mxbuild')

    url = os.environ.get('FORCED_MXBUILD_URL')
    if url is None:
        cache_dir = CACHE_DIR
        url = buildpackutil.get_blobstore_url(
            '/runtime/mxbuild-%s.tar.gz' % mendix_version
        )
    else:
        cache_dir = '/tmp/downloads'

    buildpackutil.download_and_unpack(url, '/tmp/mxbuild', cache_dir=cache_dir)


def run_mx_build():
    env = dict(os.environ)
    env['LD_LIBRARY_PATH'] = os.path.join(BUILDPACK_DIR, 'lib', 'mono-lib')
    subprocess.check_call([
        'sed',
        '-i',
        's|/app/vendor/mono/lib/libgdiplus.so|%s|g' % os.path.join(
            BUILDPACK_DIR, 'lib', 'mono-lib', 'libgdiplus.so'
        ),
        '/tmp/mono/etc/mono/config',
    ])
    subprocess.check_call([
        'sed',
        '-i',
        's|/usr/lib/libMonoPosixHelper.so|%s|g' % os.path.join(
            BUILDPACK_DIR, 'lib', 'mono-lib', 'libMonoPosixHelper.so'
        ),
        '/tmp/mono/etc/mono/config',
    ])
    java_locations = [
        '/usr/lib/jvm/jdk-%s-oracle-x64' % _get_java_version(),
        '/tmp/javasdk/usr/lib/jvm/jdk-%s-oracle-x64' % _get_java_version(),
    ]
    java_location = None
    for possible_java_location in java_locations:
        if os.path.isdir(possible_java_location):
            java_location = possible_java_location
    if java_location is None:
        raise Exception('Java not found!')
    args = [
        '/tmp/mono/bin/mono',
        '--config', '/tmp/mono/etc/mono/config',
        '/tmp/mxbuild/modeler/mxbuild.exe',
        '--output=/tmp/model.mda',
        '--java-home=%s' % java_location,
        '--java-exe-path=%s/bin/java' % java_location,
    ]
    if os.environ.get('FORCED_MXBUILD_URL'):
        args.append('--loose-version-check')
        logging.warning(
            'Using forced mxbuild version, the model will be converted'
        )
    args.append(get_mpr_file())
    subprocess.check_call(args, env=env)

    for file_name in os.listdir(BUILD_DIR):
        path = os.path.join(BUILD_DIR, file_name)
        if file_name != '.local':
            if os.path.isdir(path):
                shutil.rmtree(path)
            else:
                os.unlink(path)
    zf = zipfile.ZipFile('/tmp/model.mda')
    try:
        zf.extractall(BUILD_DIR)
    finally:
        zf.close()


if __name__ == '__main__':
    preflight_check()
    if is_source_push():
        logging.info('source push detected')
        set_up_java_sdk()
        set_up_mono()
        set_up_mx_build()
        run_mx_build()
    set_up_directory_structure()
    set_up_java()
    set_up_appdynamics()
    download_mendix_version()
    copy_buildpack_resources()
    logging.info('buildpack compile completed')
